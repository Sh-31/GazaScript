// SyntaxTree.c
#include "SyntaxTree.h"
#include <stdlib.h>
#include <stdio.h>

ASTNode *create_leaf_node(char type, int value)
{
    ASTNode *node = (ASTNode *)malloc(sizeof(ASTNode));
    node->type = type; 
    node->value = value;
    node->left = NULL;
    node->right = NULL;
    return node;
}
ASTNode *create_op_node(char type,  ASTNode *left){
    ASTNode *node = (ASTNode *)malloc(sizeof(ASTNode));
    node->type = type; 
    node->left = left;
    return node;
}
ASTNode *create_internal_node(char type, ASTNode *left, ASTNode *right)
{
    ASTNode *node = (ASTNode *)malloc(sizeof(ASTNode));
    node->type = type; 
    node->left = left;
    node->right = right;
    return node;
}

ASTNode *create_if_condition_node(char type, ASTNode *condition, ASTNode *left, ASTNode *right)
{
    ASTNode *node = (ASTNode *)malloc(sizeof(ASTNode));
    node->type = type; 
    node->condition = condition;
    node->left = left;
    node->right = right;
    return node;
}
ASTNode * AccessVariable(char type,ASTNode *node){
    return node;
}
void free_ast(ASTNode *node)
{
    if (node)
    {
        free_ast(node->left);
        free_ast(node->right);
        free(node);
    }
}
void execute_ast(ASTNode *node, int sym[], FILE *yyout){
    execute_node(node->left, sym, yyout);
    execute_node(node->left, sym, yyout);

}
void  write_in_file(int value,FILE *yyout){
    fprintf(yyout, "%d\r", value);
    // printf("d\r",value);
}
int execute_node(ASTNode *node, int sym[], FILE *yyout) {
   
    if (node) {
         printf("%c\n", node->type);

        if (node->type == 'r') {
            execute_ast(node, sym, yyout);
        }
        if (node->type > '0'&& node->type < '9') {
            execute_node(node->left, sym, yyout);
        }
        else if (node->type == 'i') {
            return node->value;
        }
        else if (node->type == '=') {
            sym[node->left->variable] = execute_node(node->right, sym, yyout);
        }
        else if (node->type == 'v') {
            return sym[node->variable];
        }
        else if (node->type == '+') {
            return execute_node(node->left, sym, yyout) + execute_node(node->right, sym, yyout);
        }
        else if (node->type == '-') {
            return execute_node(node->left, sym, yyout) - execute_node(node->right, sym, yyout);
        }
        else if (node->type == 'n') {
            return -execute_node(node->left, sym, yyout);
        }
        else if (node->type == '*') {
            return execute_node(node->left, sym, yyout) * execute_node(node->right, sym, yyout);
        }
        else if (node->type == '/') {
            return execute_node(node->left, sym, yyout) / execute_node(node->right, sym, yyout);
        }
        else if (node->type == '<') {
            return execute_node(node->left, sym, yyout) < execute_node(node->right, sym, yyout);
        }
        else if (node->type == '>') {
            return execute_node(node->left, sym, yyout) > execute_node(node->right, sym, yyout);
        }
        else if (node->type == 'p') {
            auto int value = execute_node(node->left, sym, yyout);
            printf("%d\n", value);
            write_in_file(value, yyout);
        }
        else if (node->type == 'F') {
            if (execute_node(node->condition, sym, yyout))
                { printf("yes\n");return execute_node(node->left, sym, yyout);}
            else
                {printf("no\n");return execute_node(node->right, sym, yyout);
}        }
    }
     printf("error\n");   
    return 0;
}



// SyntaxTree.h
#ifndef SYNTAX_TREE_H
#define SYNTAX_TREE_H

#include <stdio.h>
typedef struct ASTNode
{
    char type;
    int value;
    char variable;
    struct ASTNode *left;
    struct ASTNode *right;
    struct ASTNode *condition;
} ASTNode;

ASTNode *create_leaf_node(char type, int value);
ASTNode *create_internal_node(char type, ASTNode *left, ASTNode *right);
ASTNode *create_if_condition_node(char type, ASTNode *condition, ASTNode *left, ASTNode *right);
ASTNode *create_op_node(char type,  ASTNode *left);
ASTNode *AccessVariable(char type, ASTNode *node);
void free_ast(ASTNode *node);
void execute_ast(ASTNode *node, int sym[], FILE *yyout);
void write_in_file(int value,FILE *yyout);
int  execute_node(ASTNode *node, int sym[], FILE *yyout);

#endif
